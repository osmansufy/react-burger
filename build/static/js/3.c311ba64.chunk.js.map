{"version":3,"sources":["components/UI/Input/Input.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","connect","state","ings","burgerBuilder","ingredients","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","props","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","maxLength","minLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsvalid","setFormisValid","formElementsArray","key","push","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","map","formElement","Input","inValid","shouldValidate","changed","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formInputValid","inputChangedHandler","Button","disabled","btnType","Spinner","className","classes","ContactData","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.c311ba64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_1J81rlRO5zxuF98VMkEamZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1xBm4j5hECL-q6sCIhiBB4\"};","import React, {useState } from 'react';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux'\nimport * as actions from '../../../store/actions/index'\nimport withErrorHandler from '../../../components/withErrorHandler/withErrorHandler'\nimport {updateObject, checkValidity} from '../../../shared/utiliy'\nconst ContactData =props => {\n   \n       const [orderForm,setOrderForm]= useState( {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched:false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched:false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation:{\n                    required: true,\n                    maxLength: 5,\n                    minLength:1\n                },\n                valid: false,\n                touched:false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched:false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation:{\n                    required: true\n                },\n                valid: false,\n                touched:false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                validation:{},\n                value: 'fastest',\n                valid : true\n            }\n        },\n        )\n       const [formIsvalid, setFormisValid] =useState(false)\n      \n    \n\n   const orderHandler = ( event ) => {\n        event.preventDefault();\n        \n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        \n        const order = {\n            ingredients: props.ings,\n            price: props.price,\n            orderData: formData,\n            userId:props.userId\n        }\n       props.onOrderBurger(order,props.token)\n    \n    }\n  \n\n  const inputChangedHandler = (event,inputIdentifier) => {\n        \n\n      \n        const updatedFormElement=updateObject(orderForm[inputIdentifier],{\n            value:event.target.value,\n            valid:checkValidity(event.target.value,orderForm[inputIdentifier].validation),\n            touched:true\n        })      \n    \n        const updatedOrderForm=updateObject(orderForm,{\n            [inputIdentifier]:updatedFormElement\n        })\n    \n     let formIsvalid = true \n\n     for( let formInputValid in updatedOrderForm){\n         formIsvalid = updatedOrderForm[formInputValid].valid && formIsvalid\n     }\nsetFormisValid(formIsvalid)\nsetOrderForm(updatedOrderForm)\n     \n        }\n    \n\n    \n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={orderHandler}>\n           {formElementsArray.map(formElement=>(\n               <Input \n               key={formElement.id} \n               elementType={formElement.config.elementType} \n               elementConfig={formElement.config.elementConfig}  \n               value={formElement.config.value}\n               inValid={!formElement.config.valid}\n               shouldValidate={formElement.config.validation}\n               touched={formElement.config.touched}\n               changed={(event)=>inputChangedHandler(event,formElement.id)}\n               />\n           ))}\n                <Button disabled={!formIsvalid} btnType=\"Success\">ORDER</Button>\n            </form>\n        );\n        if ( props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    \n}\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React from 'react';\nimport ContactData from './ContactData/ContactData'\n\nimport {Route,Redirect} from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\n\n\nconst Checkout =props => {\n\n//     componentWillMount(){\n//     const quary = new URLSearchParams (this.props.location.search)\n//     const ingredients={}\n//     for(let param in quary.entries()){\n//         ingredients[param[0]] =  +param[1]\n//     }\n//     this.setState({ingredients:ingredients})\n// }\n\n   const CheckoutCancelledHandler=()=>{\n        props.history.goBack()\n    }\n   const CheckoutContinuedHandler=()=>{\n        props.history.replace('/checkout/contact-data')\n    }\n   \n\n        let summary= <Redirect to=\"/\" />\n        if(props.ings){\n            const purchasedRedirect = props.purchased ? <Redirect to=\"/\"/> : null;\n            summary= (<div>\n                {purchasedRedirect}\n            <CheckoutSummary\n                ingredients={props.ings}\n                checkoutCancelled={CheckoutCancelledHandler}\n                checkoutContinued={CheckoutContinuedHandler}\n               />\n               <Route path={props.match.path + '/contact-data'} \n               component={ContactData}\n               />\n          \n        </div>)\n        }\n        return summary\n    \n}\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased:state.order.purchased\n       \n       \n    };\n}\n\nexport default connect(mapStateToProps) (Checkout);","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n\n    let inputClasses=[classes.InputElement]\n    \n    if(props.inValid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n             \n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                \n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;"],"sourceRoot":""}