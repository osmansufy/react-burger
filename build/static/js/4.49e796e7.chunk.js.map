{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModelHandler","prevState","this","buildingBurger","authRedirectPath","onsetRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticate","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","bulding","dispatch","actions","input","inputElement","inputClasses","InputElement","inValid","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,KAAO,4B,yKCSnBC,E,4MACFC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,gBAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAO,EACPC,SAAS,GAEbC,SAAU,CACNV,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,YAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVK,UAAW,GAEfH,OAAO,EACPC,SAAS,IAIjBG,UAAS,G,EAKbC,oBAAsB,SAACC,EAAOC,GAC1B,IAAMC,EAAkBC,YAAa,EAAKpB,MAAMC,SAAZ,eAC/BiB,EAAaE,YAAa,EAAKpB,MAAMC,SAASiB,GAAa,CACxDX,MAAOU,EAAMI,OAAOd,MACpBI,MAAOW,YAAcL,EAAMI,OAAOd,MAAO,EAAKP,MAAMC,SAASiB,GAAaV,YAC1EI,SAAS,MAIjB,EAAKW,SAAS,CAACtB,SAAUkB,K,EAG7BK,cAAgB,SAACP,GACbA,EAAMQ,iBACN,EAAKC,MAAMC,OAAO,EAAK3B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAM,EAAKP,MAAMe,W,EAErGa,uBAAuB,WACvB,EAAKL,UAAS,SAAAM,GACV,MAAM,CACNd,UAAWc,EAAUd,c,kEAMjBe,KAAKJ,MAAMK,gBAAiD,MAA/BD,KAAKJ,MAAMM,kBACxCF,KAAKJ,MAAMO,sB,+BAGR,IAAD,OACAC,EAAoB,GAC1B,IAAM,IAAIC,KAAOL,KAAK9B,MAAMC,SACxBiC,EAAkBE,KAAM,CACpBC,GAAIF,EACJG,OAAQR,KAAK9B,MAAMC,SAASkC,KAIpC,IAAII,EAAOL,EAAkBM,KAAK,SAAAC,GAAW,OACzC,kBAAC,IAAD,CACIN,IAAKM,EAAYJ,GACjBlC,YAAasC,EAAYH,OAAOnC,YAChCC,cAAeqC,EAAYH,OAAOlC,cAClCG,MAAOkC,EAAYH,OAAO/B,MAC1BmC,SAAUD,EAAYH,OAAO3B,MAC7BgC,eAAgBF,EAAYH,OAAO9B,WACnCI,QAAS6B,EAAYH,OAAO1B,QAC5BgC,QAAS,SAAE3B,GAAF,OAAa,EAAKD,oBAAqBC,EAAOwB,EAAYJ,UAEhFP,KAAKJ,MAAMmB,UACVN,EAAK,kBAAC,IAAD,OAET,IAAIO,EAAc,KACfhB,KAAKJ,MAAMqB,QACVD,EACA,2BAAIhB,KAAKJ,MAAMqB,MAAMC,UAGzB,IAAIC,EAAa,KAIT,OAHLnB,KAAKJ,MAAMwB,iBACVD,EAAc,kBAAC,IAAD,CAAUE,GAAIrB,KAAKJ,MAAMM,oBAG/B,yBAAKoB,UAAWC,IAAQtD,MACnBkD,EACAH,EACD,0BAAMQ,SAAUxB,KAAKN,eAChBe,EACD,kBAAC,IAAD,CAAQgB,QAAQ,WAAhB,WAEJ,kBAAC,IAAD,CACRC,QAAS1B,KAAKF,uBACd2B,QAAQ,UAFA,aAEoBzB,KAAK9B,MAAMe,SAAU,SAAW,e,GA9GjD0C,aAmIJC,uBAhBO,SAAA1D,GAClB,MAAO,CACH6C,QAAQ7C,EAAM2D,KAAKd,QACnBE,MAAM/C,EAAM2D,KAAKZ,MACjBG,eAAmC,OAApBlD,EAAM2D,KAAKC,MAC1B7B,eAAe/B,EAAM6D,cAAcC,QACnC9B,iBAAiBhC,EAAM2D,KAAK3B,qBAGT,SAAA+B,GACvB,MAAO,CACHpC,OAAQ,SAACzB,EAAOW,EAASE,GAAjB,OAA8BgD,EAASC,IAAa9D,EAAOW,EAASE,KAC5EkB,kBAAkB,kBAAI8B,EAASC,IAA4B,UAIpDN,CAA6C3D,I,gCC7I5D,qCA6DekE,IAzDD,SAAEvC,GACZ,IAAIwC,EAAe,KAEfC,EAAa,CAACd,IAAQe,cAM1B,OAJG1C,EAAM2C,SAAW3C,EAAMiB,gBAAkBjB,EAAMd,SAC9CuD,EAAa/B,KAAKiB,IAAQiB,SAGrB5C,EAAMvB,aACX,IAAO,QACH+D,EAAe,yCACXd,UAAWe,EAAaI,KAAK,MACzB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMkB,WACpB,MACJ,IAAO,WACHsB,EAAe,4CACfd,UAAWe,EAAaI,KAAK,MACrB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MAEbiE,SAAU9C,EAAMkB,WACpB,MACJ,IAAO,SACHsB,EACI,4BACAd,UAAWe,EAAaI,KAAK,KACzBhE,MAAOmB,EAAMnB,MACbiE,SAAU9C,EAAMkB,SACflB,EAAMtB,cAAcqE,QAAQjC,KAAI,SAAAkC,GAAM,OACnC,4BAAQvC,IAAKuC,EAAOnE,MAAOA,MAAOmE,EAAOnE,OACpCmE,EAAOC,kBAKxB,MACJ,QACIT,EAAe,yCACfd,UAAWe,EAAaI,KAAK,MACrB7C,EAAMtB,cAFC,CAGXG,MAAOmB,EAAMnB,MAEbiE,SAAU9C,EAAMkB,WAG5B,OACI,yBAAKQ,UAAWC,IAAQuB,OACpB,2BAAOxB,UAAWC,IAAQwB,OAAQnD,EAAMoD,OACvCZ,K,mBCtDbrE,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,MAAQ,wBAAwB,aAAe,0BAA0B,QAAU","file":"static/js/4.49e796e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2YUr1vYMbwujw6K1HuakLc\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utiliy';\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n           \r\n        },\r\n        isSignup:true\r\n    }\r\n\r\n  \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]:updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        })\r\n        \r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value,this.state.isSignup);\r\n    }\r\n    switchAuthModelHandler=()=>{\r\n    this.setState(prevState=>{\r\n        return{\r\n        isSignup: !prevState.isSignup\r\n    }\r\n}\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !=='/'){\r\n            this.props.onsetRedirectPath()\r\n        }\r\n    }\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\nif(this.props.loading){\r\n    form=<Spinner />\r\n}\r\nlet errorMessage= null\r\nif(this.props.error){\r\n    errorMessage=(\r\n    <p>{this.props.error.message}</p>\r\n    )\r\n}\r\nlet authRedirect=null\r\nif(this.props.isAuthenticate){\r\n    authRedirect= <Redirect to={this.props.authRedirectPath} />\r\n}\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n        clicked={this.switchAuthModelHandler}\r\n        btnType=\"Danger\">Switch to {this.state.isSignup? \"Signup\" : \"Signin\" }</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticate:state.auth.token !==null,\r\n        buildingBurger:state.burgerBuilder.bulding,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n}\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password,isSignup) => dispatch(actions.auth(email, password,isSignup)),\r\n        onsetRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n\n    let inputClasses=[classes.InputElement]\n    \n    if(props.inValid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n             \n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                \n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};"],"sourceRoot":""}