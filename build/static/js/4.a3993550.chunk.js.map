{"version":3,"sources":["components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","connect","state","loading","auth","error","isAuthenticate","token","buildingBurger","burgerBuilder","bulding","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onsetRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","className","classes","Auth","onSubmit","preventDefault","btnType","clicked","input","inputElement","inputClasses","InputElement","inValid","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.a3993550.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2YUr1vYMbwujw6K1HuakLc\"};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utiliy';\r\nconst Auth = props=> {\r\n    const [authForm,setAuthForm]=useState({\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n           \r\n        })\r\n\r\n        const [isSignup,setIsSignup]=useState(true);\r\n        \r\n    \r\n\r\n  \r\n\r\n   const inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(authForm,{\r\n            [controlName]:updateObject(authForm[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\r\n                touched: true\r\n            })\r\n        })\r\n        setAuthForm(updatedControls)\r\n        \r\n    }\r\n\r\n   const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        props.onAuth(authForm.email.value, authForm.password.value,isSignup);\r\n    }\r\n const  switchAuthModelHandler=()=>{\r\n    \r\n    setIsSignup(!isSignup)\r\n}\r\n       const{onsetRedirectPath,buildingBurger,authRedirectPath}=props\r\n    useEffect(()=>{\r\n        if(!buildingBurger && authRedirectPath !=='/'){\r\n            onsetRedirectPath()\r\n        }\r\n    },[authRedirectPath,buildingBurger,onsetRedirectPath])\r\n   \r\n  \r\n        const formElementsArray = [];\r\n        for ( let key in authForm ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: authForm[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\nif(props.loading){\r\n    form=<Spinner />\r\n}\r\nlet errorMessage= null\r\nif(props.error){\r\n    errorMessage=(\r\n    <p>{props.error.message}</p>\r\n    )\r\n}\r\nlet authRedirect=null\r\nif(props.isAuthenticate){\r\n    authRedirect= <Redirect to={props.authRedirectPath} />\r\n}\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n        clicked={switchAuthModelHandler}\r\n        btnType=\"Danger\">Switch to {isSignup? \"Signup\" : \"Signin\" }</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticate:state.auth.token !==null,\r\n        buildingBurger:state.burgerBuilder.bulding,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n}\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password,isSignup) => dispatch(actions.auth(email, password,isSignup)),\r\n        onsetRedirectPath:()=>dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n\n    let inputClasses=[classes.InputElement]\n    \n    if(props.inValid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n             \n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n            className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                \n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;"],"sourceRoot":""}